# Even Fibonacci numbers
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# first attempt, this fib can't handle large numbers
# fib1(4000000) --> RuntimeError: maximum recursion depth exceeded
def fib1(n):
    if n == 0:
        return 1
    if n == 1:
        return 2
    else:
        return fib1(n-1)+fib1(n-2)

# second attempt, this also fails because python does not do tail recursion
def fib2(n):
    a = 1
    b = 2
    return fib2_inner(0, 1, 0,  n)


def fib2_inner(a, b, i, n):
    if i == n:
        return b
    else:
        return fib2_inner(b, a+b, i + 1, n)


# third attempt no recursion
def fib3(n):
    if n == 0:
        return 1
    if n == 1:
        return 2

    a = 1
    b = 2
    for i in range(1, n):
        c = a + b
        a = b
        b = c
    return b

# the actual code using fib3
total = 0
cur = 0
i = 0
while (True):
    cur = fib1(i)
    i = i + 1
    if cur < 4000000 and cur % 2 == 0:
        total = total + cur
    if cur > 4000000:
        break

print total

# actually fib1 would have worked, i didn't need to calcuclate fib(4000000)
# instead i needed to calculate fib(x)<4000000
# anyway, fib3 is faster
